<############################################################################################################
# Get-CsmeVulnerabilityStatus.ps1
#
# Change Log:
# 1.0 - 2020-03-07 - Initial Script Written. Web only for now.
# 1.1 - 2020-03-08 - Got SMB running.
# 1.2 - 2020-03-08 - Minor tweaks to documentation, etc.
# 1.3 - 2020-03-08 - Converted prep and cleanup tasks into functions for better code reuse.
# 1.4 - 2020-03-08 - Added exception handling for invalid SMB paths.
# 1.5 - 2020-03-08 - Added exception handling for invalid Web paths.
# 1.6 - 2020-03-09 - Moving exception handling to param statements instead of script code. Half way there...
# 1.7 - 2020-03-09 - Got all parameter validation rules working.
# 2.0 - 2020-03-09 - Stable. Adding a unit testing script.
#
# To-Do:
# Add logging options.
# Get away from using Write-Host in any capactity.
# Add verbose output.
############################################################################################################>

<#
    .Synopsis
        This script checks the system for vulnerable Intel CSME Firmware. It is a wrapper for the official Intel utility and adds additional functionality.
    .Description
        This script can run in several ways. It can download the utility directly from the Intel website. I can also download the utility from a specified UNC path. The status will be displayed on the console window once testing completes.
    .Example
        Get-CsmeVulnerabilityStatus -DownloadFromWeb
    .Example
        Get-CsmeVulnerabilityStatus -DownloadFromSmb -SmbPath \\foo\bar\utility.zip
    .Example
        Get-CsmeVulnerabilityStatus -DownloadFromWeb -Verbose
     .Parameter TempDir
        The name of the temporary folder created to contain the detection utility. Default is a random 8 digit number.
    .Parameter TargetFileName
        The name that the downloaded file will be renamed to. Default is "CsmeDetectionTool.zip"
    .Parameter WebUrl
        The URL from which to download the detection tool. Default is the Intel website.
    .Parameter DownloadFromWeb
        Using this argument tells the script to download the utility from the Intel website.
    .Parameter DownloadFromSmb
        Using this argument tells the script to download the utility from a UNC path. The -SmbPath argument must also be used.
    .Parameter SmbPath
        This argument is used with DownloadFromSmb and is the full UNC path to the utility including the filename.
    .Link
        https://arstechnica.com/information-technology/2020/03/5-years-of-intel-cpus-and-chipsets-have-a-concerning-flaw-thats-unfixable/
    .Link
        https://www.intel.com/content/www/us/en/support/articles/000033416/technologies.html
    .Link
        https://downloadcenter.intel.com/download/28632/Intel-Converged-Security-and-Management-Engine-Intel-CSME-Detection-Tool
#>

# Defining the parameters for the script to run.
Param(
    [CmdletBinding()]

    [Parameter(Mandatory=$false)]
    [String]
    $TempDir=(-join ((48..57) *120 | Get-Random -Count 8 | ForEach-Object{[char]$_})),

    [Parameter(Mandatory=$false)]
    [String]
    $TargetFileName="CsmeDetectionTool.zip",

    [Parameter(Mandatory=$true,ParameterSetName="Web")]
    [Switch]
    $DownloadFromWeb,

    [Parameter(Mandatory=$false,ParameterSetName="Web")]
    [ValidateScript({((Invoke-WebRequest $_).StatusCode -eq 200)})]
    #[String]$WebUrl="https://downloadmirror.intel.com/28632/eng/CSME_Version_Detection_Tool_Windows.zip"
    [String]
    $WebUrl="http://127.0.0.1/CSME_Version_Detection_Tool_Windows.zip",

    [Parameter(Mandatory=$true,ParameterSetName="SMB")]
    [Switch]
    $DownloadFromSmb,

    [Parameter(Mandatory=$true,ParameterSetName="SMB")]
    [ValidateScript({Test-Path $_})]
    [String]
    $SmbPath,

    [Parameter(Mandatory=$false)]
    [ValidateScript({Test-Path $_})]
    [String]
    $LogDir
)

# Because the utility must run as administrator, we add the corresponding Requires statement.
#Requires -RunAsAdministrator

Function PrepareEnvironment()
{
    #Create a random directory in C:\ using the name from the TempDir argument.
    New-Item -ItemType Directory -Path C:\ -Name $TempDir | Out-Null

    # Move into the newly created working directory.
    Set-Location C:\$TempDir
}

Function RunDetection()
{
    # Unzip the detection utility.
    Expand-Archive -Path $TargetFileName

    # Change into the detection utility directory.
    Set-Location .\CsmeDetectionTool\DiscoveryTool

    # Run the detection utility.
    .\CSME-Version-Detection-Tool-console.exe | Out-Null

    # Print the result to the terminal based on the output of the detection utility.
    Switch ($LASTEXITCODE)
    {
        # Write-Host is ugly. This should be something more elegant...
        0 {if($LogDir -ne $null){Write-Host "Platform is not vulnerable."; Add-Content -Path "$LogDir\CsmeResults.txt" -Value "$env:computername,Platform is not vulnerable."}else{Write-Host "Platform is not vulnerable."}}
        10 {if($LogDir -ne $null){Write-Host "Intel® ME driver is not installed on the platform. Unable to determine platform vulnerability."; Add-Content -Path "$LogDir\CsmeResults.txt" -Value "$env:computername,Intel® ME driver is not installed on the platform. Unable to determine platform vulnerability."}else{Write-Host "Intel® ME driver is not installed on the platform. Unable to determine platform vulnerability."}}
        11 {if($LogDir -ne $null){Write-Host "Error communicating with the Intel® ME driver. Unable to determine platform vulnerability."; Add-Content -Path "$LogDir\CsmeResults.txt" -Value "$env:computername,Error communicating with the Intel® ME driver. Unable to determine platform vulnerability."}else{Write-Host "Error communicating with the Intel® ME driver. Unable to determine platform vulnerability."}}
        100 {if($LogDir -ne $null){Write-Host "Platform is vulnerable."; Add-Content -Path "$LogDir\CsmeResults.txt" -Value "$env:computername,Platform is vulnerable."}else{Write-Host "Platform is vulnerable."}}
        101 {if($LogDir -ne $null){Write-Host "Platform is not vulnerable, it has been patched."; Add-Content -Path "$LogDir\CsmeResults.txt" -Value "$env:computername,Platform is not vulnerable, it has been patched."}else{Write-Host "Platform is not vulnerable, it has been patched."}}
        102 {if($LogDir -ne $null){Write-Host "This platform is no longer supported. No firmware update is available for security issues."; Add-Content -Path "$LogDir\CsmeResults.txt" -Value "$env:computername,This platform is no longer supported. No firmware update is available for security issues."}else{Write-Host "This platform is no longer supported. No firmware update is available for security issues."}}
        200 {if($LogDir -ne $null){Write-Host "Unable to determine platform vulnerability."; Add-Content -Path "$LogDir\CsmeResults.txt" -Value "$env:computername,Unable to determine platform vulnerability."}else{Write-Host "Unable to determine platform vulnerability."}}
    }
}

Function CleanUpEnvironment()
{
    # Set location to the root of C:
    Set-Location C:\

    # Delete the working directory.
    Remove-Item $TempDir -Recurse -Force

    # Change directory back to where the script was run from. (In case you launched it from a command prompt.)
    Set-Location $PSScriptRoot

    # The following line clears the exit code from the utility. This is mostly for debugging purposes.
    # The $LASTEXITCODE is a powershell Global and persists after script termination.
    # Thisc can cause odd behavior during testing.
    $global:LASTEXITCODE = $null
}

# Prepare to run the detection tool.
PrepareEnvironment

# The script was run with the DownloadFromWeb argument.
if($DownloadFromWeb)
{
    # Download the detection tool from the web address
    Invoke-WebRequest -Uri $WebUrl -OutFile $TargetFileName
}

# The script was run with the DownloadFromSmb argument.
if($DownloadFromSmb)
{
    # Download the detection tool from the specified SMB path.
    Copy-Item $SmbPath $TargetFileName
}

# Run the detection tool.
RunDetection

# Clean up the temporary files and foldes.
CleanUpEnvironment